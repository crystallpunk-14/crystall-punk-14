using System.Linq;
using System.Numerics;
using Content.Client._CP14.UserInterface.Systems.NodeTree;
using Content.Shared._CP14.Trading;
using Content.Shared._CP14.Trading.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client._CP14.Trading;

[GenerateTypedNameReferences]
public sealed partial class CP14TradingPlatformWindow : DefaultWindow
{
    [Dependency] private readonly ILogManager _log = default!;
    [Dependency] private readonly IGameTiming _timing = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;

    private CP14TradingPlatformUiState? _cacheState;

    private IEnumerable<CP14TradingPositionPrototype> _allPositions = [];
    private IEnumerable<CP14TradingFactionPrototype> _allFactions = [];

    private ProtoId<CP14TradingFactionPrototype>? _selectedFaction;
    private ProtoId<CP14TradingPositionPrototype>? _selectedPosition;

    public event Action<ProtoId<CP14TradingPositionPrototype>>? OnUnlock;

    private ISawmill Sawmill { get; init; }

    public CP14TradingPlatformWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Sawmill = _log.GetSawmill("cp14_trading");

        CacheSkillProto();
        _proto.PrototypesReloaded += _ => CacheSkillProto();
        _selectedFaction = _allFactions.First();

        GraphControl.OnOffsetChanged += offset =>
        {
            ParallaxBackground.Offset = -offset * 0.25f + new Vector2(1000, 1000); //hardcoding is bad
        };
        GraphControl.OnNodeSelected += SelectNode;
        UnlockButton.OnPressed += UnlockPressed;
    }

    private void UnlockPressed(BaseButton.ButtonEventArgs obj)
    {
        if (_selectedPosition is null)
            return;

        OnUnlock?.Invoke(_selectedPosition.Value);
    }

    private void SelectNode(CP14NodeTreeElement? node)
    {
        if (node == null)
        {
            DeselectNode();
            return;
        }

        if (_cacheState == null)
        {
            Sawmill.Error("Tried to select node without a cached state.");
            return;
        }

        if (!_proto.TryIndex<CP14TradingPositionPrototype>(node.NodeKey, out var indexedPosition))
            return;

        SelectNode(indexedPosition);
    }

    private void SelectNode(CP14TradingPositionPrototype? node)
    {
        if (node == null)
        {
            DeselectNode();
            return;
        }

        if (_cacheState == null)
        {
            Sawmill.Error("Tried to select node without a cached state.");
            return;
        }

        _selectedPosition = node;

        Name.Text = Loc.GetString(node.Name ?? "");
        Description.Text = Loc.GetString(node.Desc ?? "");
        LocationView.Texture = node.Icon.Frame0();
        UnlockButton.Disabled = _cacheState.UnlockedPositions.Contains(node.ID) || (node.Prerequisite != null && !_cacheState.UnlockedPositions.Contains(node.Prerequisite.Value));
    }

    private void DeselectNode()
    {
        Name.Text = string.Empty;
        Description.Text = string.Empty;
        LocationView.Texture = null;
        UnlockButton.Disabled = true;
    }

    private void CacheSkillProto()
    {
        _allPositions = _proto.EnumeratePrototypes<CP14TradingPositionPrototype>();
        _allFactions = _proto.EnumeratePrototypes<CP14TradingFactionPrototype>().OrderBy(tree => Loc.GetString(tree.Name));
    }

    public void UpdateState(CP14TradingPlatformUiState state)
    {
        _cacheState = state;

        UpdateGraphControl();
    }

    private void UpdateGraphControl()
    {
        if (_cacheState is null)
            return;

        HashSet<CP14NodeTreeElement> nodeTreeElements = new();
        var edges = new HashSet<(string, string)>();
        foreach (var position in _allPositions)
        {
            if (position.Faction != _selectedFaction)
                continue;

            var gained = _cacheState.UnlockedPositions.Contains(position);
            var active = position.Prerequisite is null || _cacheState.UnlockedPositions.Contains(position.Prerequisite.Value);
            var node = new CP14NodeTreeElement(position.ID, gained, active, position.UiPosition * 50, position.Icon);
            nodeTreeElements.Add(node);
            if (position.Prerequisite != null)
            {
                edges.Add((position.Prerequisite, position.ID));
            }
        }

        GraphControl.UpdateState(
            new CP14NodeTreeUiState(
                nodeTreeElements,
                edges: edges,
                frameIcon: new SpriteSpecifier.Rsi(
                    new ResPath("/Textures/_CP14/Interface/NodeTree/demiplane_map.rsi"),
                    "frame"),
                hoveredIcon: new SpriteSpecifier.Rsi(
                    new ResPath("/Textures/_CP14/Interface/NodeTree/demiplane_map.rsi"),
                    "hovered"),
                selectedIcon: new SpriteSpecifier.Rsi(
                    new ResPath("/Textures/_CP14/Interface/NodeTree/demiplane_map.rsi"),
                    "selected"),
                learnedIcon: new SpriteSpecifier.Rsi(
                    new ResPath("/Textures/_CP14/Interface/NodeTree/demiplane_map.rsi"),
                    "learned"),
                activeLineColor: new Color(172, 102, 190),
                lineColor: new Color(83, 40, 121)
            )
        );

        //Faction tabs update
        TreeTabsContainer.RemoveAllChildren();
        foreach (var faction in _allFactions)
        {
            var factionButton = new CP14TradingFactionButtonControl(
                faction.Color,
                Loc.GetString(faction.Name),
                _cacheState.Reputation.GetValueOrDefault(faction.ID, 0f));

            factionButton.OnPressed += () =>
            {
                SelectFaction(faction);
            };

            TreeTabsContainer.AddChild(factionButton);
        }
    }

    private void SelectFaction(CP14TradingFactionPrototype faction)
    {
        _selectedFaction = faction;
        //ParallaxBackground.ParallaxPrototype = faction.ParallaxBackground;
        TreeName.Text = Loc.GetString(faction.Name);
        UpdateGraphControl();
    }
}
