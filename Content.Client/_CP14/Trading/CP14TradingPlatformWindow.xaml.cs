using System.Linq;
using System.Numerics;
using Content.Client._CP14.UserInterface;
using Content.Client._CP14.UserInterface.Systems.NodeTree;
using Content.Shared._CP14.Trading;
using Content.Shared._CP14.Trading.Components;
using Content.Shared._CP14.Trading.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client._CP14.Trading;

[GenerateTypedNameReferences]
public sealed partial class CP14TradingPlatformWindow : DefaultWindow
{
    [Dependency] private readonly ILogManager _log = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;
    [Dependency] private readonly IEntityManager _e = default!;
    [Dependency] private readonly IGameTiming _timing = default!;

    private readonly CP14ClientTradingPlatformSystem _tradingSystem;

    private CP14TradingPlatformUiState? _cacheState;
    private Entity<CP14TradingReputationComponent>? _cachedUser;
    private bool _haveCooldown = false;

    private IEnumerable<CP14TradingPositionPrototype> _allPositions = [];
    private IEnumerable<CP14TradingFactionPrototype> _allFactions = [];

    private ProtoId<CP14TradingFactionPrototype>? _selectedFaction;
    private CP14TradingPositionPrototype? _selectedPosition;

    public event Action<ProtoId<CP14TradingPositionPrototype>>? OnUnlock;
    public event Action<ProtoId<CP14TradingPositionPrototype>>? OnBuy;

    private ISawmill Sawmill { get; init; }

    public CP14TradingPlatformWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Sawmill = _log.GetSawmill("cp14_trading");

        CacheSkillProto();
        _proto.PrototypesReloaded += _ => CacheSkillProto();
        _selectedFaction = _allFactions.First();
        _tradingSystem = _e.System<CP14ClientTradingPlatformSystem>();

        GraphControl.OnOffsetChanged += offset =>
        {
            ParallaxBackground.Offset = -offset * 0.25f + new Vector2(1000, 1000); //hardcoding is bad
        };
        GraphControl.OnNodeSelected += SelectNode;
        UnlockButton.OnPressed += UnlockPressed;
        BuyButton.OnPressed += BuyPressed;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_cacheState is null)
            return;

        _haveCooldown = _timing.CurTime < _cacheState.NextBuyTime;
        CooldownBox.Visible = _haveCooldown;

        if (!_haveCooldown)
            return;

        var cooldown = _cacheState!.NextBuyTime - _timing.CurTime;

        BuyCooldownLabel.Text = $"{Math.Floor(cooldown.TotalMinutes):00}:{cooldown.Seconds:00}";
    }

    private void UnlockPressed(BaseButton.ButtonEventArgs obj)
    {
        if (_selectedPosition is null)
            return;

        OnUnlock?.Invoke(_selectedPosition);
    }

    private void BuyPressed(BaseButton.ButtonEventArgs obj)
    {
        if (_selectedPosition is null)
            return;

        OnBuy?.Invoke(_selectedPosition.ID);
    }

    private void SelectNode(CP14NodeTreeElement? node)
    {
        if (node == null)
        {
            DeselectNode();
            return;
        }

        if (_cacheState == null)
        {
            Sawmill.Error("Tried to select node without a cached state.");
            return;
        }

        if (!_proto.TryIndex<CP14TradingPositionPrototype>(node.NodeKey, out var indexedPosition))
            return;

        SelectNode(indexedPosition);
    }

    private void SelectNode(CP14TradingPositionPrototype? node)
    {
        if (node is null || _cachedUser is null)
        {
            DeselectNode();
            return;
        }

        if (_cacheState == null)
        {
            Sawmill.Error("Tried to select node without a cached state.");
            return;
        }

        _selectedPosition = node;

        Name.Text = Loc.GetString(_selectedPosition.Name ?? "");
        Description.Text = Loc.GetString(_selectedPosition.Desc ?? "");

        LocationView.Texture = _selectedPosition.Icon.Frame0();
        UnlockButton.Disabled = !_tradingSystem.CanUnlockPosition((_cachedUser.Value.Owner, _cachedUser.Value.Comp), _selectedPosition);
        BuyButton.Disabled = !_tradingSystem.CanBuyPosition((_cachedUser.Value.Owner, _cachedUser.Value.Comp), _selectedPosition);

        UnlockCost.Text = _selectedPosition.UnlockReputationCost.ToString();

        BuyPriceHolder.RemoveAllChildren();
        BuyPriceHolder.AddChild(new CP14PriceControl(_selectedPosition.Price));
    }

    private void DeselectNode()
    {
        Name.Text = string.Empty;
        Description.Text = string.Empty;
        LocationView.Texture = null;
        UnlockButton.Disabled = true;
    }

    private void CacheSkillProto()
    {
        _allPositions = _proto.EnumeratePrototypes<CP14TradingPositionPrototype>();
        _allFactions = _proto.EnumeratePrototypes<CP14TradingFactionPrototype>().OrderBy(tree => Loc.GetString(tree.Name));
    }

    public void UpdateState(CP14TradingPlatformUiState state)
    {
        _cacheState = state;
        var ent = _e.GetEntity(state.User);

        if (!_e.TryGetComponent<CP14TradingReputationComponent>(ent, out var repComp))
            return;

        _cachedUser = (ent, repComp);

        UpdateGraphControl();
    }

    private void UpdateGraphControl()
    {
        if (_cachedUser is null)
            return;

        HashSet<CP14NodeTreeElement> nodeTreeElements = new();
        var edges = new HashSet<(string, string)>();
        foreach (var position in _allPositions)
        {
            if (position.Faction != _selectedFaction)
                continue;

            var unlocked = _cachedUser.Value.Comp.UnlockedPositions;
            var gained = unlocked.Contains(position);
            var active = _tradingSystem.CanUnlockPosition((_cachedUser.Value.Owner, _cachedUser.Value.Comp), position);
            var node = new CP14NodeTreeElement(position.ID, gained, active, position.UiPosition * 50, position.Icon);
            nodeTreeElements.Add(node);
            if (position.Prerequisite != null)
            {
                edges.Add((position.Prerequisite, position.ID));
            }
        }

        GraphControl.UpdateState(
            new CP14NodeTreeUiState(
                nodeTreeElements,
                edges: edges,
                frameIcon: new SpriteSpecifier.Rsi(
                    new ResPath("/Textures/_CP14/Interface/NodeTree/trading.rsi"),
                    "frame"),
                hoveredIcon: new SpriteSpecifier.Rsi(
                    new ResPath("/Textures/_CP14/Interface/NodeTree/trading.rsi"),
                    "hovered"),
                selectedIcon: new SpriteSpecifier.Rsi(
                    new ResPath("/Textures/_CP14/Interface/NodeTree/trading.rsi"),
                    "selected"),
                learnedIcon: new SpriteSpecifier.Rsi(
                    new ResPath("/Textures/_CP14/Interface/NodeTree/trading.rsi"),
                    "learned"),
                activeLineColor: new Color(172, 102, 190),
                lineColor: new Color(83, 40, 121)
            )
        );

        //Faction tabs update
        TreeTabsContainer.RemoveAllChildren();
        foreach (var faction in _allFactions)
        {
            var factionButton = new CP14TradingFactionButtonControl(
                faction.Color,
                Loc.GetString(faction.Name),
                _cachedUser.Value.Comp.Reputation.GetValueOrDefault(faction.ID, 0f));

            factionButton.OnPressed += () =>
            {
                SelectFaction(faction);
            };

            TreeTabsContainer.AddChild(factionButton);
        }
        SelectNode(_selectedPosition);
    }

    private void SelectFaction(CP14TradingFactionPrototype faction)
    {
        _selectedFaction = faction;
        //ParallaxBackground.ParallaxPrototype = faction.ParallaxBackground;
        TreeName.Text = Loc.GetString(faction.Name);
        UpdateGraphControl();
    }
}
