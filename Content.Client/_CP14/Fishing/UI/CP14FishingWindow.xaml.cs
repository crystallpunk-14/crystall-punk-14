using Content.Client.Resources;
using Content.Shared._CP14.Fishing;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._CP14.Fishing.UI;

[GenerateTypedNameReferences]
public sealed partial class CP14FishingWindow : BaseWindow
{
    [Dependency] private readonly IResourceCache _resourceCache = default!;
    [Dependency] private readonly IEntityManager _entity = default!;

    private readonly CP14FishingSystem _fishing;

    private CP14FishingMinigamePrototype?  _fishingMinigame;
    private Texture? _floatTexture;
    private Texture? _fishTexture;

    public CP14FishingWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _fishing = _entity.System<CP14FishingSystem>();
    }

    public void InitVisuals(CP14FishingMinigamePrototype fishingMinigame)
    {
        FishingWindow.Visible = false;

        // Hashing
        _fishingMinigame = fishingMinigame;

        // Getting data
        var background = _fishingMinigame.Background;
        var fish = _fishingMinigame.FishIcon;
        var floater = _fishingMinigame.Float;

        FishingWindow.MaxSize = background.Size;
        FishingWindow.SetSize = background.Size;

        FishingBackground.SetSize = background.Size;

        var backgroundTexture = _resourceCache.GetTexture(background.Texture);
        FishingBackground.PanelOverride = new StyleBoxTexture
        {
            Texture = backgroundTexture,
        };

        _floatTexture = _resourceCache.GetTexture(floater.Texture);
        _fishTexture = _resourceCache.GetTexture(fish.Texture);
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        if (_fishingMinigame is null || _floatTexture is null || _fishTexture is null)
            return;

        if (!_fishing.GetInfo(out var rodComponent, out var fishComponent))
            return;

        var floatBox = CalculateUIBox(_fishingMinigame.Float, rodComponent.FloatPosition);
        var fishBox = CalculateUIBox(_fishingMinigame.FishIcon, fishComponent.FishPosAndDestination.X);

        handle.DrawTextureRect(_floatTexture, floatBox);
        handle.DrawTextureRect(_fishTexture, fishBox);
    }

    private static UIBox2 CalculateUIBox(FishingMinigameElementData data, float verticalOffset)
    {
        var left = data.Offset.X;
        var top = data.Offset.Y + verticalOffset + data.Size.Y;
        var right = data.Offset.X + data.Size.X;
        var bottom = data.Offset.Y + verticalOffset;

        return new UIBox2(left, top, right, bottom);
    }
}

