using Content.Shared._CP14.TravelingStoreShip;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;

namespace Content.Client._CP14.TravelingStoreShip;

[GenerateTypedNameReferences]
public sealed partial class CP14StoreWindow : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IGameTiming _timing = default!;

    public TimeSpan? NextTravelTime;
    public bool OnStation;

    public CP14StoreWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Tabs.SetTabTitle(0, Loc.GetString("cp14-store-ui-tab-buy"));
        Tabs.SetTabTitle(1, Loc.GetString("cp14-store-ui-tab-sell"));
    }

    public void UpdateUI(CP14StoreUiState state)
    {
        UpdateProducts(state);
        UpdateCash(state);

        NextTravelTime = state.NextTravelTime;
        OnStation = state.OnStation;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        //Updating time
        if (NextTravelTime is not null)
        {
            var time = NextTravelTime.Value - _timing.CurTime;
            TravelTimeLabel.Text =
                $"{Loc.GetString(OnStation ? "cp14-store-ui-next-travel-out" : "cp14-store-ui-next-travel-in")} {time.Minutes:00}:{time.Seconds:00}";
        }
    }

    private void UpdateProducts(CP14StoreUiState state)
    {
        BuyProductsContainer.RemoveAllChildren();
        SellProductsContainer.RemoveAllChildren();

        foreach (var product in state.ProductsBuy)
        {
            var control = new CP14StoreProductControl(product);
            BuyProductsContainer.AddChild(control);
        }

        foreach (var product in state.ProductsSell)
        {
            var control = new CP14StoreProductControl(product);
            SellProductsContainer.AddChild(control);
        }
    }

    private void UpdateCash(CP14StoreUiState state)
    {
        CashPriceHolder.RemoveAllChildren();
        CashPriceHolder.AddChild(new CP14PriceControl(state.Cash));
    }
}
