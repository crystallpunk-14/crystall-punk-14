using System.Text;
using Content.Shared._CP14.TravelingStoreShip;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._CP14.TravelingStoreShip;

[GenerateTypedNameReferences]
public sealed partial class CP14StoreProductControl : Control
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    public event Action<CP14StoreUiProductEntry, CP14StoreBuyPositionPrototype>? OnSelect;

    private readonly SpriteSystem _sprite;

    private readonly CP14StoreBuyPositionPrototype _productPrototype;

    public CP14StoreProductControl(CP14StoreUiProductEntry entry)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = _entity.System<SpriteSystem>();

        _productPrototype = _prototype.Index(entry.ProtoId);

        _prototype.TryIndex(entry.ProtoId, out var indexedProduct);

        ProductButton.OnPressed += _ => OnSelect?.Invoke(entry, _productPrototype);

        UpdateName(_entity, _prototype, indexedProduct);
        UpdateView();
        UpdatePrice(entry.Price);
    }

    private void UpdatePrice(int price)
    {
        PriceHolder.AddChild(new CP14PriceControl(price));
    }

    private void UpdateName(IEntityManager entManager, IPrototypeManager protoMan, CP14StoreBuyPositionPrototype? entry)
    {
        ProductName.Text = Loc.GetString(_productPrototype.Title);

        if (entry is null)
            return;

        var sb = new StringBuilder();
        foreach (var service in entry.Services)
        {
            sb.Append(service.GetDescription(protoMan, entManager));
        }

        ProductDesc.Text = sb.ToString();
    }

    private void UpdateView()
    {
        View.Texture = _sprite.Frame0(_productPrototype.Icon);
    }
}
