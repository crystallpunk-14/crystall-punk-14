using System.Numerics;
using System.Text;
using Content.Client._CP14.UserInterface.Systems.NodeTree;
using Content.Shared._CP14.DemiplaneTraveling;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._CP14.DemiplaneTraveling;

[GenerateTypedNameReferences]
public sealed partial class CP14DemiplaneMapWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly ILogManager _log = default!;

    private CP14DemiplaneMapUiState? _cachedState;
    private Dictionary<string, CP14DemiplaneMapNode> _nodeDict = new();
    private CP14DemiplaneMapNode? _selectedNode;
    private ISawmill Sawmill { get; init; }
    public CP14DemiplaneMapWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Sawmill = _log.GetSawmill("cp14_demiplane_map_window");

        GraphControl.OnOffsetChanged += offset =>
        {
            ParallaxBackground.Offset = -offset * 0.25f + new Vector2(1000, 1000); //hardcoding is bad
        };
        GraphControl.OnNodeSelected += SelectNode;
    }

    public void UpdateState(CP14DemiplaneMapUiState state)
    {
        _cachedState = state;

        HashSet<CP14NodeTreeElement> nodeTreeElements = new();
        foreach (var node in state.Nodes)
        {
            _nodeDict[node.NodeKey] = node;
            if (node.Start)
            {
                var startElement = new CP14NodeTreeElement(
                    nodeKey: node.NodeKey,
                    gained: true,
                    active: true,
                    node.UiPosition * 100,
                    icon: new SpriteSpecifier.Rsi(new ResPath("_CP14/Interface/NodeTree/demiplane_map.rsi"), "center"));
                nodeTreeElements.Add(startElement);
            }
            else
            {
                _prototype.TryIndex(node.Location, out var location);

                var treeElement = new CP14NodeTreeElement(
                    nodeKey: node.NodeKey,
                    gained: false,
                    active: true,
                    node.UiPosition * 100,
                    icon: location?.Icon);
                nodeTreeElements.Add(treeElement);
            }
        }
        GraphControl.UpdateState(
            new CP14NodeTreeUiState(
                nodeTreeElements,
                edges: state.Edges,
                frameIcon: new SpriteSpecifier.Rsi(new ResPath("/Textures/_CP14/Interface/NodeTree/demiplane_map.rsi"), "frame"),
                hoveredIcon: new SpriteSpecifier.Rsi(new ResPath("/Textures/_CP14/Interface/NodeTree/demiplane_map.rsi"), "hovered"),
                selectedIcon: new SpriteSpecifier.Rsi(new ResPath("/Textures/_CP14/Interface/NodeTree/demiplane_map.rsi"), "selected"),
                learnedIcon: new SpriteSpecifier.Rsi(new ResPath("/Textures/_CP14/Interface/NodeTree/demiplane_map.rsi"), "learned"),
                lineColor: new Color(172, 102, 190)
                )
            );
    }

    private void SelectNode(CP14NodeTreeElement? node)
    {
        if (node == null)
        {
            DeselectNode();
            return;
        }

        if (_cachedState == null)
        {
            Sawmill.Error("Tried to select node without a cached state.");
            return;
        }

        if (_nodeDict.TryGetValue(node.NodeKey, out var mapNode))
        {
            SelectNode(mapNode);
        }
        else
        {
            Sawmill.Error($"Tried to select node {node.NodeKey} that doesn't exist in the map.");
            DeselectNode();
        }
    }

    private void SelectNode(CP14DemiplaneMapNode? node)
    {
        _selectedNode = node;
        if (node == null)
        {
            DeselectNode();
            return;
        }

        if (_cachedState == null)
        {
            Sawmill.Error("Tried to select node without a cached state.");
            return;
        }

        if (node.Location != null && _prototype.TryIndex(node.Location, out var location))
        {
            if (location.Name is not null)
                SkillName.Text = Loc.GetString(location.Name);

            //Generate description
            List<LocId> modifierNames = new();
            foreach (var modifier in node.Modifiers)
            {
                if (!_prototype.TryIndex(modifier, out var indexedModifier))
                    continue;

                if (indexedModifier.Name is null)
                    continue;

                modifierNames.Add(indexedModifier.Name.Value);
            }

            var sb = new StringBuilder();
            foreach (var name in modifierNames)
            {
                sb.Append("- " + Loc.GetString(name) + "\n");
            }
            SkillDescription.Text = sb.ToString();
            SkillView.Texture = location?.Icon?.Frame0();
        }
        else
        {
            SkillName.Text = string.Empty;
            SkillDescription.Text = string.Empty;
            SkillView.Texture = null;
        }

        //LearnButton.Disabled = node.Gained || node.Start;
    }

    private void DeselectNode()
    {
        SkillName.Text = string.Empty;
        SkillDescription.Text = string.Empty;
        SkillView.Texture = null;
        LearnButton.Disabled = true;
    }
}
