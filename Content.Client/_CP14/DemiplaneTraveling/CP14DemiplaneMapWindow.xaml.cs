using System.Numerics;
using Content.Client._CP14.UserInterface.Systems.NodeTree;
using Content.Shared._CP14.DemiplaneTraveling;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._CP14.DemiplaneTraveling;

[GenerateTypedNameReferences]
public sealed partial class CP14DemiplaneMapWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly ILogManager _log = default!;

    private CP14DemiplaneMapUiState? _cachedState;

    private ISawmill Sawmill { get; init; }
    public CP14DemiplaneMapWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Sawmill = _log.GetSawmill("cp14_demiplane_map_window");

        GraphControl.OnOffsetChanged += offset =>
        {
            ParallaxBackground.Offset = -offset * 0.25f + new Vector2(1000, 1000); //hardcoding is bad
        };
    }

    public void UpdateState(CP14DemiplaneMapUiState state)
    {
        HashSet<CP14NodeTreeElement> nodeTreeElements = new();
        foreach (var node in state.Nodes)
        {
            var treeElement = new CP14NodeTreeElement(
                nodeKey: node.NodeKey,
                gained: false,
                active: true,
                node.UiPosition * 100,
                childrens: node.Childrens);
            nodeTreeElements.Add(treeElement);
        }
        GraphControl.UpdateState(new CP14NodeTreeUiState(nodeTreeElements));
    }
}
