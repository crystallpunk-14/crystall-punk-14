/*
 * This file is sublicensed under MIT License
 * https://github.com/space-wizards/space-station-14/blob/master/LICENSE.TXT
 */

using System.Linq;
using Content.Shared._CP14.Workbench;
using Content.Shared._CP14.Workbench.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._CP14.Workbench;

[GenerateTypedNameReferences]
public sealed partial class CP14WorkbenchWindow : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private string _searchFilter = string.Empty;
    private CP14WorkbenchUiRecipesState? _cachedState;
    private Dictionary<int, LocId> _categories = new();

    public event Action<CP14WorkbenchUiRecipesEntry>? OnCraft;
    public event Action<string>? OnTextUpdated;

    private CP14WorkbenchUiRecipesEntry? _selectedEntry;

    public CP14WorkbenchWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SearchBar.OnTextChanged += _ =>
        {
            OnTextUpdated?.Invoke(SearchBar.Text);
        };
        CraftButton.OnPressed += _ =>
        {
            if (_selectedEntry is null)
                return;

            OnCraft?.Invoke(_selectedEntry.Value);
        };
        OptionCategories.OnItemSelected += obj =>
        {
            OptionCategories.SelectId(obj.Id);
            SearchBar.SetText(string.Empty);

            UpdateRecipesVisibility();
        };
    }

    public void UpdateFilter(string? search)
    {
        _searchFilter = search?.Trim().ToLowerInvariant() ?? string.Empty;

        if (_cachedState is null)
            return;

        UpdateRecipesVisibility();
    }

    public void UpdateRecipesVisibility()
    {
        if (_cachedState is null)
            return;

        CraftsContainer.RemoveAllChildren();

        List<CP14WorkbenchUiRecipesEntry> uncraftableList = new();

        foreach (var entry in _cachedState.Recipes)
        {
            if (!_prototype.TryIndex(entry.ProtoId, out var indexedEntry))
                continue;

            //Apply search
            if (_searchFilter is not null && _searchFilter != "")
            {
                if (!_prototype.TryIndex(indexedEntry.Result, out var indexedResult))
                    continue;

                if (!indexedResult.Name.Contains(_searchFilter))
                    continue;
            }

            //Apply filter category
            if (OptionCategories.SelectedId != -1 && _categories.TryGetValue(OptionCategories.SelectedId, out var selectedCategory))
            {
                if (indexedEntry.Category == null)
                    continue;

                if (!_prototype.TryIndex(indexedEntry.Category, out var indexedCategory2))
                    continue;

                if (indexedCategory2.Name != selectedCategory)
                    continue;
            }

            if (entry.Craftable)
            {
                var control = new CP14WorkbenchRecipeControl(entry);
                control.OnSelect += RecipeSelect;
                CraftsContainer.AddChild(control);
            }
            else
                uncraftableList.Add(entry);
        }

        foreach (var entry in uncraftableList)
        {
            var control = new CP14WorkbenchRecipeControl(entry);
            control.OnSelect += RecipeSelect;
            CraftsContainer.AddChild(control);
        }

        if (_selectedEntry is not null && _cachedState.Recipes.Contains(_selectedEntry.Value))
        {
            RecipeSelect(_selectedEntry.Value, _prototype.Index(_selectedEntry.Value.ProtoId));
            return;
        }

        RecipeSelect(_cachedState);
    }

    public void UpdateState(CP14WorkbenchUiRecipesState recipesState, string? search = null)
    {
        _cachedState = recipesState;

        OptionCategories.Clear();
        _categories.Clear();
        OptionCategories.AddItem(Loc.GetString("cp14-recipe-category-all"), -1);
        List<LocId> categories = new();
        var count = 0;

        foreach (var entry in recipesState.Recipes)
        {
            if (!_prototype.TryIndex(entry.ProtoId, out var indexedEntry))
                continue;

            //Populate categories
            if (indexedEntry.Category != null && _prototype.TryIndex(indexedEntry.Category, out var indexedCategory))
            {
                if (!categories.Contains(indexedCategory.Name))
                {
                    categories.Add(indexedCategory.Name);
                }
            }
        }

        categories = categories.OrderBy(c => Loc.GetString(c)).ToList();
        foreach (var cat in categories)
        {
            OptionCategories.AddItem(Loc.GetString(cat), count);
            _categories.Add(count, cat);
            count++;
        }

        UpdateRecipesVisibility();
    }

    private void RecipeSelect(CP14WorkbenchUiRecipesState recipesState)
    {
        foreach (var entry in recipesState.Recipes)
        {
            RecipeSelect(entry, _prototype.Index(entry.ProtoId));
            break;
        }
    }

    private void RecipeSelect(CP14WorkbenchUiRecipesEntry entry, CP14WorkbenchRecipePrototype recipe)
    {
        _selectedEntry = entry;

        var result = _prototype.Index(recipe.Result);

        ItemView.SetPrototype(recipe.Result);
        var counter = recipe.ResultCount > 1 ? $" x{recipe.ResultCount}" : "";
        ItemName.Text = result.Name + counter;
        ItemDescription.Text = result.Description;

        ItemRequirements.RemoveAllChildren();

        foreach (var requirement in recipe.Requirements)
        {
            ItemRequirements.AddChild(new CP14WorkbenchRequirementControl(requirement));
        }

        CraftButton.Disabled = !entry.Craftable;
    }
}
