using Content.Shared.Administration.Events;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Console;

namespace Content.Client.Administration.UI.Tabs.PanicBunkerTab;

[GenerateTypedNameReferences]
public sealed partial class PanicBunkerTab : Control
{
    [Dependency] private readonly IConsoleHost _console = default!;
    [Dependency] private readonly IConfigurationManager _cfg = default!;

    private string _minAccountAge;
    private string _minOverallMinutes;
    // CrystallEdge suspicious activity warning system
    private List<SuspiciousWarningLevelSelection> _suspiciousWarningLevelSelections = [];
    private string _currentSuspiciousWarningLevel = string.Empty;

    public PanicBunkerTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        DisableAutomaticallyButton.ToolTip = Loc.GetString("admin-ui-panic-bunker-disable-automatically-tooltip");

        MinAccountAge.OnTextEntered += args => SendMinAccountAge(args.Text);
        MinAccountAge.OnFocusExit += args => SendMinAccountAge(args.Text);
        _minAccountAge = MinAccountAge.Text;

        MinOverallMinutes.OnTextEntered += args => SendMinOverallMinutes(args.Text);
        MinOverallMinutes.OnFocusExit += args => SendMinOverallMinutes(args.Text);
        _minOverallMinutes = MinOverallMinutes.Text;

        // CrystallEdge suspicious activity warning system
        foreach (var type in Enum.GetValues<SuspiciousWarningLevelSelection>())
        {
            _suspiciousWarningLevelSelections.Add(type);
            SuspiciousWarningLevel.AddItem(GetLocalizedEnumValue(type));
        }

        UpdateSuspiciousWarningLevel();

        SuspiciousWarningLevel.OnItemSelected += ev =>
        {
            SuspiciousWarningLevel.SelectId(ev.Id);
            SendSuspiciousWarningLevel(_suspiciousWarningLevelSelections[ev.Id]);
        };
    }

    private void SendMinAccountAge(string text)
    {
        if (string.IsNullOrWhiteSpace(text) ||
            text == _minAccountAge ||
            !int.TryParse(text, out var minutes))
        {
            return;
        }

        _console.ExecuteCommand($"panicbunker_min_account_age {minutes}");
    }

    private void SendMinOverallMinutes(string text)
    {
        if (string.IsNullOrWhiteSpace(text) ||
            text == _minOverallMinutes ||
            !int.TryParse(text, out var minutes))
        {
            return;
        }

        _console.ExecuteCommand($"panicbunker_min_overall_minutes {minutes}");
    }

    public void UpdateStatus(PanicBunkerStatus status)
    {
        EnabledButton.Pressed = status.Enabled;
        EnabledButton.Text = Loc.GetString(status.Enabled
            ? "admin-ui-panic-bunker-enabled"
            : "admin-ui-panic-bunker-disabled"
        );
        EnabledButton.ModulateSelfOverride = status.Enabled ? Color.Red : null;

        DisableAutomaticallyButton.Pressed = status.DisableWithAdmins;
        EnableAutomaticallyButton.Pressed = status.EnableWithoutAdmins;
        CountDeadminnedButton.Pressed = status.CountDeadminnedAdmins;
        ShowReasonButton.Pressed = status.ShowReason;

        MinAccountAge.Text = status.MinAccountAgeMinutes.ToString();
        _minAccountAge = MinAccountAge.Text;

        MinOverallMinutes.Text = status.MinOverallMinutes.ToString();
        _minOverallMinutes = MinOverallMinutes.Text;
    }

    // CrystallEdge suspicious activity warning system
    private enum SuspiciousWarningLevelSelection
    {
        Disabled,
        Low,
        Medium,
        High,
    }

    private string GetLocalizedEnumValue(SuspiciousWarningLevelSelection selection)
    {
        return selection switch
        {
            SuspiciousWarningLevelSelection.Disabled => Loc.GetString("cp14-admin-ui-suspicious-warning-level-disabled"),
            SuspiciousWarningLevelSelection.Low => Loc.GetString("cp14-admin-ui-suspicious-warning-level-low"),
            SuspiciousWarningLevelSelection.Medium => Loc.GetString("cp14-admin-ui-suspicious-warning-level-medium"),
            SuspiciousWarningLevelSelection.High =>  Loc.GetString("cp14-admin-ui-suspicious-warning-level-high"),
            _ => throw new ArgumentOutOfRangeException(nameof(selection), selection, null),
        };
    }

    private void UpdateSuspiciousWarningLevel()
    {
        _currentSuspiciousWarningLevel = _cfg.GetCVar(CCVars.SuspiciousAccountsWarningLevel);
        if (!Enum.TryParse(_currentSuspiciousWarningLevel, true, out SuspiciousWarningLevelSelection currentSuspiciousWarningSelection))
        {
            throw new ArgumentOutOfRangeException(nameof(_currentSuspiciousWarningLevel),
                _currentSuspiciousWarningLevel,
                null);
        }

        SuspiciousWarningLevel.SelectId((int)currentSuspiciousWarningSelection);
    }

    private void SendSuspiciousWarningLevel(SuspiciousWarningLevelSelection selection)
    {
        _console.ExecuteCommand($"cp14.suspicious-warning-level {Enum.GetName(selection)}");
    }
}
