uniform sampler2D SCREEN_TEXTURE;

uniform lowp int count;
uniform highp vec2[64] position;
uniform highp float[64] radius;

uniform lowp int anticount;
uniform highp vec2[64] antiposition;
uniform highp float[64] antiradius;

uniform highp vec2 renderScale;
uniform highp vec3 shaderColor;

const highp float radiusFalloff = 20.0;
const highp float noiseScale = 6.0;
const highp float timeScale = 0.1;

highp float noise( highp vec2 p ) {
    const highp float K1 = 0.366025404;
    const highp float K2 = 0.211324865;

    highp vec2  i = floor( p + (p.x+p.y)*K1 );
    highp vec2  a = p - i + (i.x+i.y)*K2;
    highp float m = step(a.y,a.x);
    highp vec2  o = vec2(m,1.0-m);
    highp vec2  b = a - o + K2;
    highp vec2  c = a - 1.0 + 2.0*K2;
    highp vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
    highp vec3  n = h*h*h*h*vec3( dot(a,zRandom(i+0.0)), dot(b,zRandom(i+o)), dot(c,zRandom(i+1.0)));
    return dot( n, vec3(70.0) );
}

highp vec3 gradientColor(highp float t) {
    if (t < 0.5) {
        highp float f = t / 0.5;
        return mix(shaderColor * vec3(0.00, 0.00, 0.05), shaderColor * vec3(0.05, 0.05, 0.15), f);
    } else {
        highp float f = (t - 0.5) / 0.5;
        return mix(shaderColor * vec3(0.05, 0.05, 0.15), shaderColor * vec3(0.15, 0.15, 0.25), f);
    }
}

highp float calculateVisibilityAtPoint(highp vec2 fragPos) {
    highp float visibility = 0.0;
    highp float scale = renderScale.x;

    // Видимость (раскрытие)
    for (lowp int i = 0; i < 64 && i < count; i++) {
        highp float scaledRadius = radius[i] * 33.0 * scale;
        highp float dist = length(fragPos - position[i]);

        highp float fade = smoothstep(scaledRadius - radiusFalloff * scale, scaledRadius, dist);
        visibility = max(visibility, 1.0 - fade);
    }

    // Антивидимость (перекрытие)
    for (lowp int i = 0; i < 64 && i < anticount; i++) {
        highp float scaledRadius = antiradius[i] * 33.0 * scale;
        highp float dist = length(fragPos - antiposition[i]);

        highp float fade = smoothstep(scaledRadius - radiusFalloff * scale, scaledRadius, dist);
        highp float antiVis = 1.0 - fade;

        // Учитываем антивидимость как маску
        visibility = min(visibility, fade); // fade → 1 в центре антизоны (нулевая видимость)
    }

    return visibility;
}

highp float calculateEdgeHighlight(highp float visibility) {
    if (visibility >= 0.99 || visibility <= 0.0)
        return 0.0;

    return visibility;
}


void fragment() {
    highp vec2 fragPos = FRAGCOORD.xy;
    highp vec2 uv = fragPos * SCREEN_PIXEL_SIZE;
    highp float t = TIME * timeScale;
    highp vec2 noiseUV = uv * noiseScale + vec2(t);

    // Цветовая маска (по шуму)
    highp float n = noise(noiseUV);
    highp vec3 colorOverlay = gradientColor(n);

    // Искажение позиции для эффекта "миража"
    highp float nX = noise(noiseUV + vec2(3.1, 7.7));
    highp float nY = noise(noiseUV + vec2(9.3, 2.4));
    highp vec2 distortion = vec2(nX - 0.5, nY - 0.5) * 15.0 * renderScale.x;

    highp float visibility = calculateVisibilityAtPoint(fragPos + distortion);
    highp float edgeHighlight = calculateEdgeHighlight(visibility);

    highp vec4 baseColor = zTextureSpec(SCREEN_TEXTURE, uv);
    highp vec3 finalColor = mix(colorOverlay, baseColor.rgb, visibility);

    finalColor = mix(finalColor, shaderColor, edgeHighlight);

    highp float minAlpha = 1.0;
    COLOR = vec4(finalColor, mix(minAlpha, 1.0, edgeHighlight));
}


