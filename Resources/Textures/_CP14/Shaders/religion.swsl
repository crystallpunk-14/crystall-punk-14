uniform sampler2D SCREEN_TEXTURE;
uniform lowp int count;
uniform highp vec2[64] position;
uniform highp float[64] radius;
uniform highp vec2 renderScale;

const highp float radiusFalloff = 60.0;
const highp float noiseScale = 6;
const highp float timeScale = 0.1;

highp float noise( highp vec2 p ) {
    const highp float K1 = 0.366025404;
    const highp float K2 = 0.211324865;

    highp vec2  i = floor( p + (p.x+p.y)*K1 );
    highp vec2  a = p - i + (i.x+i.y)*K2;
    highp float m = step(a.y,a.x);
    highp vec2  o = vec2(m,1.0-m);
    highp vec2  b = a - o + K2;
    highp vec2  c = a - 1.0 + 2.0*K2;
    highp vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
    highp vec3  n = h*h*h*h*vec3( dot(a,zRandom(i+0.0)), dot(b,zRandom(i+o)), dot(c,zRandom(i+1.0)));
    return dot( n, vec3(70.0) );
}

// Градиент: 0.0 → чёрный, 0.5 → синий, 1.0 → фиолетовый
highp vec3 gradientColor(highp float t) {
    if (t < 0.5) {
        // от черного до синего
        highp float f = t / 0.5;
        return mix(vec3(0.0), vec3(0.01, 0.0, 0.01), f);
    } else {
        // от синего до фиолетового
        highp float f = (t - 0.5) / 0.5;
        return mix(vec3(0.01, 0.0, 0.01), vec3(0.02, 0.0, 0.01), f);
    }
}

void fragment() {
    highp vec2 fragPos = FRAGCOORD.xy;
    highp float visibility = 0.0;
    highp float edgeHighlight = 0.0;
    highp float scale = renderScale.x;

    highp vec2 uv = fragPos * SCREEN_PIXEL_SIZE;
    highp float t = TIME * timeScale;
    highp vec2 noiseUV = uv * noiseScale + vec2(t);

    highp float n = noise(noiseUV);
    highp vec3 colorOverlay = gradientColor(n);

    highp float nX = noise(noiseUV + vec2(3.1, 7.7));
    highp float nY = noise(noiseUV + vec2(9.3, 2.4));
    highp vec2 distortion = vec2(nX - 0.5, nY - 0.5) * 15.0 * scale;

    for (lowp int i = 0; i < 64 && i < count; i++) {
        highp float scaledRadius = radius[i] * 30.0 * scale;
        highp float dist = length((fragPos + distortion) - position[i]);
    
        highp float fade = smoothstep(scaledRadius - radiusFalloff * scale, scaledRadius, dist);
        visibility = max(visibility, 1.0 - fade);
    
        // Узкая кромка по расстоянию до радиуса
        highp float offset = -60; 
        highp float edgeWidth = 16.0 * scale; // ширина кромки в пикселях
        highp float edgeDist = abs(dist - (scaledRadius + offset));
        highp float edge = smoothstep(edgeWidth, 0.0, edgeDist);
        edgeHighlight = max(edgeHighlight, edge);
    }


    highp vec4 baseColor = zTextureSpec(SCREEN_TEXTURE, fragPos * SCREEN_PIXEL_SIZE);
    highp vec3 finalColor = mix(colorOverlay, baseColor.rgb, visibility);

    // Наложим бордовую кромку
    highp vec3 edgeColor = vec3(0.3, 0.0, 0.05); // бордовый
    finalColor = mix(
        finalColor,
        edgeColor,
        edgeHighlight * step(0.5, 1.0 - visibility)
    );

    highp float minAlpha = 0.8;
    COLOR = vec4(finalColor, mix(minAlpha, 1.0, visibility));
}


